#include <iostream>
#include <vector>
#include <cmath>
#include <stack>
#include <tuple>
#include <algorithm>
#include <map>
#include <queue>
#include <unordered_map>

using namespace std;
typedef long long ll;
typedef vector<ll> vll;
typedef vector<ll> vi;
typedef vector<vi> vvi;
typedef pair<ll, ll> pll;
typedef pair<ll, ll> pii;
typedef vector<pll> vpll;
typedef pair<char, ll> pci;
#define REPi(n) for (ll i = 0; i < n; i++)
#define REPj(n) for (ll j = 0; j < n; j++)
#define REPk(n) for (ll k = 0; k < n; k++)
#define REP1i(n) for (ll i = 1; i <= n; i++)
#define REP1j(n) for (ll j = 1; j <= n; j++)
#define REP1k(n) for (ll k = 1; k <= n; k++)

bool isPerfectSquare(ll num) {
    ll sqrtNum = static_cast<ll>(sqrt(num));
    return (sqrtNum * sqrtNum == num);
}

ll moves = 0;

/*
 * primes
 */

bool isprime(int x) {
  if (x < 2) return false;

  for (int f = 2; f*f <= x; f++)
    if (x % f == 0)
      return false;
  
  return true;
}

ll largest_exponent = 0;

unordered_map<ll, int> primefactorize(ll x) {
    unordered_map<ll, int> factors;
    for (ll f = 2; f * f <= x; f++) {
        while (x % f == 0) {
            factors[f]++;
            if (factors[f] > largest_exponent) largest_exponent = factors[f];
            x /= f;
        }
    }
    if (x != 1) { 
        factors[x]++;
        if (factors[x] > largest_exponent) largest_exponent = factors[x];
    }
    return factors;
}

bool isPowerOfTwo(int n) {
    if (n <= 0) return false;

    double log2n = log2(n);

    return floor(log2n) == log2n;
}

int main()
{
    ll n;
    cin >> n;
    unordered_map<ll, int> factors = primefactorize(n);
    ll moves;

    if (n == 1) {
        cout << "1 0" << endl;
        return 0;
    }

    if (!isPowerOfTwo(largest_exponent)) {
        moves = floor(log2(largest_exponent)) + 1;
        // make it to be 
    } else {
        moves = log2(largest_exponent);
    }

    // calc the min answer
    ll ans = 1;

    bool need_multiply = false;

    for (pair<ll, int> entry : factors) {
        ans *= entry.first;
        if (entry.second != largest_exponent) {
            need_multiply = true;
        }
    }


    if (need_multiply || !isPowerOfTwo(largest_exponent)) {
        moves++;
    }

    cout << ans << " " << moves;

    return 0;
}