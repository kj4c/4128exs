#include <iostream>
#include <vector>
#include <cmath>
#include <stack>
#include <tuple>
#include <algorithm>
#include <map>
#include <queue>

using namespace std;
typedef long long ll;
typedef vector<ll> vll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
typedef vector<pll> vpll;
typedef pair<char, int> pci;
#define REPi(n) for (int i = 0; i < n; i++)
#define REPj(n) for (int j = 0; j < n; j++)
#define REPk(n) for (int k = 0; k < n; k++)
#define REP1i(n) for (int i = 1; i <= n; i++)
#define REP1j(n) for (int j = 1; j <= n; j++)
#define REP1k(n) for (int k = 1; k <= n; k++)


#define modboy 1000000007

ll mod_pow(ll base, ll exp, ll mod) {
    ll result = 1;
    while (exp > 0) {
        if (exp % 2 == 1) {
            result = (result * base) % mod;
        }
        base = (base * base) % mod;
        exp /= 2;
    }
    return result;
}

int main()
{
    int T;
    cin >> T;

    REPi(T) {
        int n;
        ll totalSum = 0;
        cin >> n;
        vector<ll> s(n);

        REPj(n) {
            cin >> s[j];
        }

        sort(s.begin(), s.end());

        REPk(n) {
            // given this element is a max means everything to the left of it
            // this means how many times this max value will be seen in the subset
            // times the value itself
            ll max = (s[k] * mod_pow(2, k, modboy)) % modboy;

            // given this element is a min means everything to the right of it
            // same for how many times this as a min
            ll min = (s[k] * mod_pow(2, n - k - 1, modboy)) % modboy;

            // calculate the diff between these two
            ll diff = (max - min + modboy) % modboy;
            totalSum = (totalSum + diff) % modboy;
        }

        cout << totalSum << endl;
    }
    return 0;
}